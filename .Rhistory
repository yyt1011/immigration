x<- rnorm(10, mean=0)
mean(x)
x<- rnorm(10, mean=0)
mean(x)
x<- rnorm(10, mean=10)
mean(x)
x<- rnorm(10, mean=10)
print x
print(x)
mean(x)
x<- rnorm(10, mean=0)
print(x)
mean(x)
median(x)
type(x)
type.x
type.x()
typeof(x)
x<- rnorm(10, mean=0)
print(x)
x<-sort(x)
print(x)
mean(x)
median(x)
y<- sample(1:10, 100, replace = TRUE)
#choose 100 numbers in the dataset from 1 to 10, after using it put it back into the set again.
print(y)
y_freq<- table(y)
sort(y_freq, decreasing=TRUE)
sort(y,decreasing=FALSE)
y_count<- table(y)
sort(y_count, decreasing = TRUE)
y<- sample(1:10, 100, replace = TRUE)
#choose 100 numbers in the dataset from 1 to 10, after using it put it back into the set again.
print(y)
sort(y_freq, decreasing=TRUE)
median(y)
`2012.2014MPA_subgroups` <- read.delim("~/Desktop/data/2012-2014MPA_subgroups.csv")
View(`2012.2014MPA_subgroups`)
## 1. What are the names of the variables in data? (copy and paste output into Canvas assignment submission link)
names(data)
knitr::opts_chunk$set(echo = TRUE, comment = "#>")
## read data into R
df <- read.csv("2-data.csv", stringsAsFactors = FALSE)
setwd("~/")
## preview first six rows of data
head(df)
knitr::opts_chunk$set(echo = TRUE, comment = "#>")
## your code goes here
race <- table(df$race)
print race
print(race)
## your code goes here
race_sex <- table(df$race, df$sex)
print(race)
## your code goes here
race_sex <- table(df$race)
print(race)
sex <- table(df$sex)
print(sex)
## your code goes here
race_sex <- table(df$race, df$sex)
print(race_sex)
## use comment lines like this one to annotate (explain) your code
min_v <- min(df$age)
print(min_v)
min_v
min(df$age)
min(age)
min(df$age)
View(`2012.2014MPA_subgroups`)
View(df)
type(df$age)
class(df$age)
min(df$age)
min(df$age, na.rm = TRUE)
max(df$age, na.rm = TRUE)
min(df$polar, na.rm = TRUE)
min(df$sm_use, na.rm = TRUE)
min(df$network_agree, na.rm = TRUE)
min(df$age, df$polar, df$sm_use, df$network_agree, na.rm = TRUE)
c <- min(df$age, df$polar, df$sm_use, df$network_agree, na.rm = TRUE)
c
max(df$polar, na.rm = TRUE)
max(df$sm_use, na.rm = TRUE)
max(df$network_agree, na.rm = TRUE)
mean(df$age, na.rm = TRUE)
sd(df$age, na.rm = TRUE)
sd(df$polar, na.rm = TRUE)
sd(df$sm_use, na.rm = TRUE)
sd(df$network_agree, na.rm = TRUE)
min(df$pp, na.rm = TRUE)
count(df)
nrow{df}
nrow(df)
min(df$age, na.rm = TRUE)
min(df$polar, na.rm = TRUE)
min(df$sm_use, na.rm = TRUE)
min(df$network_agree, na.rm = TRUE)
min(df$pp, na.rm = TRUE)
max(df$age, na.rm = TRUE)
max(df$polar, na.rm = TRUE)
max(df$sm_use, na.rm = TRUE)
max(df$network_agree, na.rm = TRUE)
max(df$pp, na.rm = TRUE)
mean(df$age, na.rm = TRUE)
mean(df$polar, na.rm = TRUE)
mean(df$sm_use, na.rm = TRUE)
mean(df$network_agree, na.rm = TRUE)
mean(min(df$pp, na.rm = TRUE))
sd(df$age, na.rm = TRUE)
sd(df$polar, na.rm = TRUE)
sd(df$sm_use, na.rm = TRUE)
sd(df$network_agree, na.rm = TRUE)
sd(df$pp, na.rm = TRUE)
c <- table(min(df$age, na.rm = TRUE),max(df$age, na.rm = TRUE),mean(df$age, na.rm = TRUE),sd(df$age, na.rm = TRUE))
c
min(df$age, na.rm = TRUE)
max(df$age, na.rm = TRUE)
max(df$polar, na.rm = TRUE)
min(df$age, na.rm = TRUE)
max(df$age, na.rm = TRUE)
mean(df$age, na.rm = TRUE)
sd(df$age, na.rm = TRUE)
sex <- table(df$sex)
sex
race <- table(df$race)
race
277.0/364
22.0 /364
19.0/364
16.0/364
76+15
?seq
x <- c(1,2)
y <- x-1
print(y)
x <- c(1L)
class(x)
x <- c("TRUE")
class(x)
x <- c(TRUE)
class(x)
knitr::opts_chunk$set(echo = TRUE, comment = "#>")
ggplot(mtcars, aes(x = mpg, y = wt)) +
geom_point()
library(ggplot2)
ggplot(mtcars, aes(x = mpg, y = wt)) +
geom_point()
install.packages(c("gcookbook"))
install.packages(c("callr", "cluster", "DBI", "dplyr", "foreign", "highr", "hms", "httpuv", "lubridate", "MASS", "Matrix", "mgcv", "modelr", "munsell", "nlme", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "rmarkdown", "rpart", "selectr", "servr", "stringdist", "stringi", "stringr", "survival", "tidyr", "utf8", "xfun", "yaml"))
p <- ggplot(df, aes(x=factor(YEAR), y=CAP))+
geom_bar( stat="identity",fill="blue", width=0.75)+
ggtitle('2008-2018 Refugee Arrival Ceiling and Admitted')+
scale_x_discrete('YEAR')+
theme_fivethirtyeight()+
geom_line(aes(x=factor(df$YEAR),y=df$ADMITTED,group=1),color='#109779',size=1)
library ('ggplot2')
library ('ggthemes')
library ('scales')
df <- read.csv('ceiling.csv',stringsAsFactors = FALSE)
p <- ggplot(df, aes(x=factor(YEAR), y=CAP))+
geom_bar( stat="identity",fill="blue", width=0.75)+
ggtitle('2008-2018 Refugee Arrival Ceiling and Admitted')+
scale_x_discrete('YEAR')+
theme_fivethirtyeight()+
geom_line(aes(x=factor(df$YEAR),y=df$ADMITTED,group=1),color='#109779',size=1)
ggplot(df, aes(x=factor(YEAR), y=CAP))+
geom_bar( stat="identity",fill="blue", width=0.75)+
ggtitle('2008-2018 Refugee Arrival Ceiling and Admitted')+
scale_x_discrete('YEAR')+
theme_fivethirtyeight()+
geom_line(aes(x=factor(df$YEAR),y=df$ADMITTED,group=1),color='#109779',size=1)
ggplot(df, aes(x=factor(YEAR), y=CAP))+
geom_bar( stat="identity",fill="black", width=0.75)+
ggtitle('2008-2018 Refugee Arrival Ceiling and Admitted')+
scale_x_discrete('YEAR')+
theme_fivethirtyeight()+
geom_line(aes(x=factor(df$YEAR),y=df$ADMITTED,group=1),color='#109779',size=1)
ggplot(df, aes(x=factor(YEAR), y=CAP))+
geom_bar( stat="identity", width=0.75)+
ggtitle('2008-2018 Refugee Arrival Ceiling and Admitted')+
scale_x_discrete('YEAR')+
theme_fivethirtyeight()+
geom_line(aes(x=factor(df$YEAR),y=df$ADMITTED,group=1),color='#109779',size=1)
install.packages("Quandl")
library(Quandl)
library(Quandl)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages(c("dbplyr", "dplyr", "ggplot2", "ggthemes", "tidyr", "tidyverse"))
install.packages(c("dbplyr", "dplyr", "ggplot2", "ggthemes", "tidyr", "tidyverse"))
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
library(ggplot2)
iinstall.packages("Quandl")
install.packages("Quandl")
library(Quandl)
install.packages("devtools")
library(devtools)
library(devtools)
library(Quandl)
mydata = Quandl("FRED/GDP")
View(mydata)
mydata = Quandl("FRED/GDP", type = "ts")
mydata2 = Quandl.datatable("ZACKS/FC", ticker="AAPL")
Ermb4ToEuDHDyaxaYsUf
Quandl.api_key("Ermb4ToEuDHDyaxaYsUf")
Quandl.api_key("Ermb4ToEuDHDyaxaYsUf")
mydata2 = Quandl.datatable("ZACKS/FC", ticker="AAPL")
mydata2 = Quandl.datatable("ZACKS/FC", ticker="AAPL")
Quandl.api_key("Ermb4ToEuDHDyaxaYsUf")
mydata2
View(mydata2)
library(Quandl)
mydata3 = Quandl.datatable("WIKI")
Quandl.api_key("Ermb4ToEuDHDyaxaYsUf")
mydata3 = Quandl.datatable("WIKI")
library(data.table)
data <- fread("https://docs.google.com/spreadsheets/u/2/d/e/2PACX-1vRwAqp96T9sYYq2-i7Tj0pvTf6XVHjDSMIKBdZHXiCGGdNC0ypEU9NbngS8mxea55JuCFuua1MUeOj5/pubhtml#")
View(data)
install.packages('wbstats')
library(httr)
library(jsonlite)
library(tidyverse)
library(wbstats)
sourceRequest <- GET(url = 'http://api.worldbank.org/v2/sources?format=json')
sourceResponse <- content(sourceRequest, as='text', encoding = 'UTF-8')
sourceJSON <- fromJSON(sourceResponse)
View(sourceJSON)
sourceJSON <- fromJSON(sourceResponse, flatten = TRUE)
sourceJSON <- fromJSON(sourceResponse, flatten = TRUE)
View(sourceJSON)
sourceJSON <- fromJSON(sourceResponse, flatten = TRUE) %>% data.frame()
sourceJSON[,cols]
sourceJSON <- fromJSON(sourceResponse, flatten = TRUE) %>% data.frame()
cols <- c('id','name')
sourceJSON[,cols]
View(sourceJSON)
sourceJSON <- fromJSON(sourceResponse, flatten = TRUE) %>% data.frame()
sourceJSON <- fromJSON(sourceResponse, flatten = TRUE)
sourceRequest <- GET(url = 'http://api.worldbank.org/v2/sources?format=json')
sourceResponse <- content(sourceRequest, as='text', encoding = 'UTF-8')
sourceJSON <- fromJSON(sourceResponse, flatten = TRUE)
View(sourceJSON)
sourceJSON <- fromJSON(sourceResponse, flatten = TRUE)%>%data.frame()
View(sourceJSON)
indicatorRequest <- GET(url = 'http://api.worldbank.org/v2/indicator?per_page=500&format=json&source=6')
indicactorResponse <- content(indicatorRequest, as = 'text', encoding = 'UTF-8')
indicatorJSON <- fromJSON(indicatorRequest, flatten = TRUE) %>% data.frame()
indicatorJSON <- fromJSON(indicatorResponse, flatten = TRUE) %>% data.frame()
indicatorJSON <- fromJSON(indicactorResponse, flatten = TRUE) %>% data.frame()
indicatorResponse <- content(indicatorRequest, as = 'text', encoding = 'UTF-8')
indicatorJSON <- fromJSON(indicatorResponse, flatten = TRUE) %>% data.frame()
cols <- c('id','name')
View(indiccatorJSON)
View(indicatorJSON)
indicator <- 'DT.DOD.DLXF.CD'
definition <- which(indicatorJSON$id == indicator)
print(definition)
indicatorRequest <- GET(url = 'http://api.worldbank.org/v2/indicator?per_page=500&format=json&source=6')
indicatorResponse <- content(indicatorRequest, as = 'text', encoding = 'UTF-8')
indicatorJSON <- fromJSON(indicatorResponse, flatten = TRUE) %>% data.frame()
View(indicatorJSON)
cols <- c('id','name')
View(indicatorJSON)
indicator <- 'DT.DOD.DLXF.CD'
definition <- which(indicatorJSON$id == indicator)
print(indicatorJSON$sourceNote[definition])
locationRequest <- GET(url = "http://api.worldbank.org/v2/country?per_page=300&format=json&source=6")
locationResponse <- content(locationRequest, as = "text", encoding = "UTF-8")
locationJSON <- fromJSON(locationResponse, flatten = TRUE) %>% data.frame()
View(locationJSON)
cols <- c("id","name")
locationList <- locationJSON[,col]
locationList <- locationJSON[,cols]
View(locationList)
install.packages('WDI')
library(WDI)
location = c("ECA","SSA","SAS","LAC","MNA","EAP")
firstYear = 2019
lastYear - 2018
lastYear = 2018
data = WDI(indicator = dataSeries, country = location, start = firstYear, end = lastYear)
firstYear = 2009
lastYear = 2019
data = WDI(indicator = dataSeries, country = location, start = firstYear, end = lastYear)
dataSeries = 'DT.DOD.DLXF.CD'
data = WDI(indicator = dataSeries, country = location, start = firstYear, end = lastYear)
head(data)
data$DT.DOD.DLXF.CD = data$DT.DOD.DLXF.CD/1000000000
data$DT.DOD.DLXF.CD = round(data$DT.DOD.DLXF.CD,0)
colnames(data)[colnames(data)=='country'] <- 'Region'
colnames(data)[colnames(data)=='DT.DOD.DLXF.CD'] . <- 'ExternalDebtStock'
colnames(data)[colnames(data)=='DT.DOD.DLXF.CD'] <- 'ExternalDebtStock'
colnames(data)[colnames(data)=='year'] <- 'Year'
data$Region <-sub('(excluding high income)', '', data$Region)
head(data)
data$Region <- sub('\\()','',data$Region)
head(data)
data <- subset(data, select = -c(iso2c))
head(data)
glimpse(df_rat)
setwd("~/Repo/immigration")
library(tidyverse)
library(dbplyr)
df <- read.csv('PERM_Disclos
emp$EMPLOYER_POSTAL_CODE <- as.character(emp$EMPLOYER_POSTAL_CODE)
emp$EMPLOYER_CITY <- toupper(emp$EMPLOYER_CITY)
emp$EMPLOYER_STATE_PROVINCE <- toupper(emp$EMPLOYER_STATE_PROVINCE)
for (row in 1:nrow(emp)){
zipcode <- emp$EMPLOYER_POSTAL_CODE[row]
if (nchar(zipcode)==10){
emp$EMPLOYER_POSTAL_CODE[row] <- substr(zipcode, 1,5)
}
}
for (row in 1:nrow(emp)){
zipcode <- emp$EMPLOYER_POSTAL_CODE[row]
if (nchar(zipcode)==10){
emp$EMPLOYER_POSTAL_CODE[row] <- substr(zipcode, 1,5)
}
}
emp_loc <- emp %>% group_by(EMPLOYER_STATE_PROVINCE, EMPLOYER_CITY, EMPLOYER_POSTAL_CODE) %>%
summarise(count = n()) %>%
arrange(desc(count))
################process time######################
appv <- df %>% filter(CASE_STATUS == 'Certified')
################process time######################
emp_clean <- read.csv('emp_loc3.csv')
View(emp_clean)
emp_clean$RECEIVED_DATE <- as.Date(emp_clean$RECEIVED_DATE)
emp_clean$RECEIVED_DATE <- as.Date(emp_clean$RECEIVED_DATE, format = "%m/%d/%y")
################process time######################
emp_clean <- read.csv('emp_loc3.csv')
View(emp_clean)
emp_clean$RECEIVED_DATE2 <- as.Date(emp_clean$RECEIVED_DATE, format = "%m/%d/%y")
emp_clean$RECEIVED_DATE2 <- strftime(as.Date(emp_clean$RECEIVED_DATE, format = "%m/%d/%Y"), format = "%m/%d/%Y")
emp_clean$DECISION_DATE2 <- strftime(as.Date(emp_clean$DECISION_DATE, format = "%m/%d/%Y"), format = "%m/%d/%Y")
inp <- c("15/1/2019", "5/5/2019")
as.Date(input)
as.Date(inp)
strftime(as.Date(inp))
as.Date(inp, format = "%d/%m/%Y")
inp <- c("3/29/2010", "8/15/2019")
as.Date(inp, format = "%d/%m/%Y")
as.Date(inp, format = "%m/%d/%Y")
inp <- c("03/29/2010", "08/15/2019")
as.Date(inp, format = "%m/%d/%Y")
inp <- c("3/29/2010", "8/15/2019")
as.Date(inp, format = "%m/%d/%Y")
strftime(as.Date(inp, format = "%m/%d/%Y"))
inp <- c("8/23/2011", "8/15/2019")
as.Date(inp, format = "%m/%d/%Y")
inp <- c("10/5/2011", "8/15/2019")
as.Date(inp, format = "%m/%d/%Y")
strftime(as.Date(inp, format = "%m/%d/%Y"))
emp_clean$PROCESS_TIME <- emp_clean$DECISION_DATE2 - emp_clean$RECEIVED_DATE2
typeof(emp_clean$DECISION_DATE2)
emp_clean$PROCESS_TIME <- as.Date(emp_clean$DECISION_DATE2, format = "%m/%d/%Y") - as.Date(emp_clean$RECEIVED_DATE2,format = "%m/%d/%Y")
emp_clean$PROCESS_YEAR <- emp_clean$PROCESS_TIME/365
write.csv(emp_clean, "emp_loc4.csv", row.names = FALSE)
