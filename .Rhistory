min(df$age, df$polar, df$sm_use, df$network_agree, na.rm = TRUE)
c <- min(df$age, df$polar, df$sm_use, df$network_agree, na.rm = TRUE)
c
max(df$polar, na.rm = TRUE)
max(df$sm_use, na.rm = TRUE)
max(df$network_agree, na.rm = TRUE)
mean(df$age, na.rm = TRUE)
sd(df$age, na.rm = TRUE)
sd(df$polar, na.rm = TRUE)
sd(df$sm_use, na.rm = TRUE)
sd(df$network_agree, na.rm = TRUE)
min(df$pp, na.rm = TRUE)
count(df)
nrow{df}
nrow(df)
min(df$age, na.rm = TRUE)
min(df$polar, na.rm = TRUE)
min(df$sm_use, na.rm = TRUE)
min(df$network_agree, na.rm = TRUE)
min(df$pp, na.rm = TRUE)
max(df$age, na.rm = TRUE)
max(df$polar, na.rm = TRUE)
max(df$sm_use, na.rm = TRUE)
max(df$network_agree, na.rm = TRUE)
max(df$pp, na.rm = TRUE)
mean(df$age, na.rm = TRUE)
mean(df$polar, na.rm = TRUE)
mean(df$sm_use, na.rm = TRUE)
mean(df$network_agree, na.rm = TRUE)
mean(min(df$pp, na.rm = TRUE))
sd(df$age, na.rm = TRUE)
sd(df$polar, na.rm = TRUE)
sd(df$sm_use, na.rm = TRUE)
sd(df$network_agree, na.rm = TRUE)
sd(df$pp, na.rm = TRUE)
c <- table(min(df$age, na.rm = TRUE),max(df$age, na.rm = TRUE),mean(df$age, na.rm = TRUE),sd(df$age, na.rm = TRUE))
c
min(df$age, na.rm = TRUE)
max(df$age, na.rm = TRUE)
max(df$polar, na.rm = TRUE)
min(df$age, na.rm = TRUE)
max(df$age, na.rm = TRUE)
mean(df$age, na.rm = TRUE)
sd(df$age, na.rm = TRUE)
sex <- table(df$sex)
sex
race <- table(df$race)
race
277.0/364
22.0 /364
19.0/364
16.0/364
76+15
?seq
x <- c(1,2)
y <- x-1
print(y)
x <- c(1L)
class(x)
x <- c("TRUE")
class(x)
x <- c(TRUE)
class(x)
knitr::opts_chunk$set(echo = TRUE, comment = "#>")
ggplot(mtcars, aes(x = mpg, y = wt)) +
geom_point()
library(ggplot2)
ggplot(mtcars, aes(x = mpg, y = wt)) +
geom_point()
install.packages(c("gcookbook"))
install.packages(c("callr", "cluster", "DBI", "dplyr", "foreign", "highr", "hms", "httpuv", "lubridate", "MASS", "Matrix", "mgcv", "modelr", "munsell", "nlme", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "rmarkdown", "rpart", "selectr", "servr", "stringdist", "stringi", "stringr", "survival", "tidyr", "utf8", "xfun", "yaml"))
p <- ggplot(df, aes(x=factor(YEAR), y=CAP))+
geom_bar( stat="identity",fill="blue", width=0.75)+
ggtitle('2008-2018 Refugee Arrival Ceiling and Admitted')+
scale_x_discrete('YEAR')+
theme_fivethirtyeight()+
geom_line(aes(x=factor(df$YEAR),y=df$ADMITTED,group=1),color='#109779',size=1)
library ('ggplot2')
library ('ggthemes')
library ('scales')
df <- read.csv('ceiling.csv',stringsAsFactors = FALSE)
p <- ggplot(df, aes(x=factor(YEAR), y=CAP))+
geom_bar( stat="identity",fill="blue", width=0.75)+
ggtitle('2008-2018 Refugee Arrival Ceiling and Admitted')+
scale_x_discrete('YEAR')+
theme_fivethirtyeight()+
geom_line(aes(x=factor(df$YEAR),y=df$ADMITTED,group=1),color='#109779',size=1)
ggplot(df, aes(x=factor(YEAR), y=CAP))+
geom_bar( stat="identity",fill="blue", width=0.75)+
ggtitle('2008-2018 Refugee Arrival Ceiling and Admitted')+
scale_x_discrete('YEAR')+
theme_fivethirtyeight()+
geom_line(aes(x=factor(df$YEAR),y=df$ADMITTED,group=1),color='#109779',size=1)
ggplot(df, aes(x=factor(YEAR), y=CAP))+
geom_bar( stat="identity",fill="black", width=0.75)+
ggtitle('2008-2018 Refugee Arrival Ceiling and Admitted')+
scale_x_discrete('YEAR')+
theme_fivethirtyeight()+
geom_line(aes(x=factor(df$YEAR),y=df$ADMITTED,group=1),color='#109779',size=1)
ggplot(df, aes(x=factor(YEAR), y=CAP))+
geom_bar( stat="identity", width=0.75)+
ggtitle('2008-2018 Refugee Arrival Ceiling and Admitted')+
scale_x_discrete('YEAR')+
theme_fivethirtyeight()+
geom_line(aes(x=factor(df$YEAR),y=df$ADMITTED,group=1),color='#109779',size=1)
install.packages("Quandl")
library(Quandl)
library(Quandl)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages(c("dbplyr", "dplyr", "ggplot2", "ggthemes", "tidyr", "tidyverse"))
install.packages(c("dbplyr", "dplyr", "ggplot2", "ggthemes", "tidyr", "tidyverse"))
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
library(ggplot2)
iinstall.packages("Quandl")
install.packages("Quandl")
library(Quandl)
install.packages("devtools")
library(devtools)
library(devtools)
library(Quandl)
mydata = Quandl("FRED/GDP")
View(mydata)
mydata = Quandl("FRED/GDP", type = "ts")
mydata2 = Quandl.datatable("ZACKS/FC", ticker="AAPL")
Ermb4ToEuDHDyaxaYsUf
Quandl.api_key("Ermb4ToEuDHDyaxaYsUf")
Quandl.api_key("Ermb4ToEuDHDyaxaYsUf")
mydata2 = Quandl.datatable("ZACKS/FC", ticker="AAPL")
mydata2 = Quandl.datatable("ZACKS/FC", ticker="AAPL")
Quandl.api_key("Ermb4ToEuDHDyaxaYsUf")
mydata2
View(mydata2)
library(Quandl)
mydata3 = Quandl.datatable("WIKI")
Quandl.api_key("Ermb4ToEuDHDyaxaYsUf")
mydata3 = Quandl.datatable("WIKI")
library(data.table)
data <- fread("https://docs.google.com/spreadsheets/u/2/d/e/2PACX-1vRwAqp96T9sYYq2-i7Tj0pvTf6XVHjDSMIKBdZHXiCGGdNC0ypEU9NbngS8mxea55JuCFuua1MUeOj5/pubhtml#")
View(data)
install.packages('wbstats')
library(httr)
library(jsonlite)
library(tidyverse)
library(wbstats)
sourceRequest <- GET(url = 'http://api.worldbank.org/v2/sources?format=json')
sourceResponse <- content(sourceRequest, as='text', encoding = 'UTF-8')
sourceJSON <- fromJSON(sourceResponse)
View(sourceJSON)
sourceJSON <- fromJSON(sourceResponse, flatten = TRUE)
sourceJSON <- fromJSON(sourceResponse, flatten = TRUE)
View(sourceJSON)
sourceJSON <- fromJSON(sourceResponse, flatten = TRUE) %>% data.frame()
sourceJSON[,cols]
sourceJSON <- fromJSON(sourceResponse, flatten = TRUE) %>% data.frame()
cols <- c('id','name')
sourceJSON[,cols]
View(sourceJSON)
sourceJSON <- fromJSON(sourceResponse, flatten = TRUE) %>% data.frame()
sourceJSON <- fromJSON(sourceResponse, flatten = TRUE)
sourceRequest <- GET(url = 'http://api.worldbank.org/v2/sources?format=json')
sourceResponse <- content(sourceRequest, as='text', encoding = 'UTF-8')
sourceJSON <- fromJSON(sourceResponse, flatten = TRUE)
View(sourceJSON)
sourceJSON <- fromJSON(sourceResponse, flatten = TRUE)%>%data.frame()
View(sourceJSON)
indicatorRequest <- GET(url = 'http://api.worldbank.org/v2/indicator?per_page=500&format=json&source=6')
indicactorResponse <- content(indicatorRequest, as = 'text', encoding = 'UTF-8')
indicatorJSON <- fromJSON(indicatorRequest, flatten = TRUE) %>% data.frame()
indicatorJSON <- fromJSON(indicatorResponse, flatten = TRUE) %>% data.frame()
indicatorJSON <- fromJSON(indicactorResponse, flatten = TRUE) %>% data.frame()
indicatorResponse <- content(indicatorRequest, as = 'text', encoding = 'UTF-8')
indicatorJSON <- fromJSON(indicatorResponse, flatten = TRUE) %>% data.frame()
cols <- c('id','name')
View(indiccatorJSON)
View(indicatorJSON)
indicator <- 'DT.DOD.DLXF.CD'
definition <- which(indicatorJSON$id == indicator)
print(definition)
indicatorRequest <- GET(url = 'http://api.worldbank.org/v2/indicator?per_page=500&format=json&source=6')
indicatorResponse <- content(indicatorRequest, as = 'text', encoding = 'UTF-8')
indicatorJSON <- fromJSON(indicatorResponse, flatten = TRUE) %>% data.frame()
View(indicatorJSON)
cols <- c('id','name')
View(indicatorJSON)
indicator <- 'DT.DOD.DLXF.CD'
definition <- which(indicatorJSON$id == indicator)
print(indicatorJSON$sourceNote[definition])
locationRequest <- GET(url = "http://api.worldbank.org/v2/country?per_page=300&format=json&source=6")
locationResponse <- content(locationRequest, as = "text", encoding = "UTF-8")
locationJSON <- fromJSON(locationResponse, flatten = TRUE) %>% data.frame()
View(locationJSON)
cols <- c("id","name")
locationList <- locationJSON[,col]
locationList <- locationJSON[,cols]
View(locationList)
install.packages('WDI')
library(WDI)
location = c("ECA","SSA","SAS","LAC","MNA","EAP")
firstYear = 2019
lastYear - 2018
lastYear = 2018
data = WDI(indicator = dataSeries, country = location, start = firstYear, end = lastYear)
firstYear = 2009
lastYear = 2019
data = WDI(indicator = dataSeries, country = location, start = firstYear, end = lastYear)
dataSeries = 'DT.DOD.DLXF.CD'
data = WDI(indicator = dataSeries, country = location, start = firstYear, end = lastYear)
head(data)
data$DT.DOD.DLXF.CD = data$DT.DOD.DLXF.CD/1000000000
data$DT.DOD.DLXF.CD = round(data$DT.DOD.DLXF.CD,0)
colnames(data)[colnames(data)=='country'] <- 'Region'
colnames(data)[colnames(data)=='DT.DOD.DLXF.CD'] . <- 'ExternalDebtStock'
colnames(data)[colnames(data)=='DT.DOD.DLXF.CD'] <- 'ExternalDebtStock'
colnames(data)[colnames(data)=='year'] <- 'Year'
data$Region <-sub('(excluding high income)', '', data$Region)
head(data)
data$Region <- sub('\\()','',data$Region)
head(data)
data <- subset(data, select = -c(iso2c))
head(data)
glimpse(df_rat)
setwd("~/Repo/immigration")
df <- read.csv('PERM_Disclosure_Data_FY2020_Q2.csv')
View(df)
emp <- df%>%select(CASE_STATUS, RECEIVED_DATE, DECISION_DATE,EMPLOYER_NAME:EMPLOYER_STATE_PROVINCE, EMPLOYER_POSTAL_CODE, EMPLOYER_NUM_EMPLOYEES:NAICS_CODE,PW_SOC_CODE:PW_UNIT_OF_PAY)
library(tidyverse)
library(dbplyr)
df <- read.csv('PERM_Disclosure_Data_FY2020_Q2.csv')
emp <- df%>%select(CASE_STATUS, RECEIVED_DATE, DECISION_DATE,EMPLOYER_NAME:EMPLOYER_STATE_PROVINCE, EMPLOYER_POSTAL_CODE, EMPLOYER_NUM_EMPLOYEES:NAICS_CODE,PW_SOC_CODE:PW_UNIT_OF_PAY)
View(emp)
emp_loc <- emp %>% groupby(EMPLOYER_POSTAL_CODE) %>%
summarise(count = n(EMPLOYER_POSTAL_CODE))
emp_loc <- emp %>% group_by(EMPLOYER_POSTAL_CODE) %>%
summarise(count = n(EMPLOYER_POSTAL_CODE))
view(emp_loc)
emp_loc <- emp %>% group_by(EMPLOYER_POSTAL_CODE) %>%
summarise(count = n(EMPLOYER_NAME))
emp_loc <- emp %>% group_by(EMPLOYER_POSTAL_CODE) %>%
summarise(count = n())
view(emp_loc)
emp_loc <- emp %>% group_by(EMPLOYER_STATE_PROVINCE, EMPLOYER_CITY, EMPLOYER_POSTAL_CODE) %>%
summarise(count = n())
view(emp_loc)
emp_loc <- emp %>% group_by(EMPLOYER_STATE_PROVINCE, EMPLOYER_CITY, EMPLOYER_POSTAL_CODE) %>%
summarise(count = n()) %>%
arrange(desc(count))
view(emp_loc)
view(emp_loc)
view(emp_loc)
for (row in nrow(emp_loc)) {
zipcode <- emp_loc[row, 3]
if (zipcode.length != 5){
print(zipcode)
}
}
emploc[1,3]
emp_loc[1,3]
for (row in nrow(emp_loc)) {
zipcode <- emp_loc[row, 3]
length <- nchar(zipcode)
if (length != 5){
print(zipcode)
}
}
for (row in nrow(emp_loc)) {
zipcode <- emp_loc[row, 3]
print(zipcode)
# length <- nchar(zipcode)
# if (length != 5){
#   print(zipcode)
# }
}
for (row in 1:nrow(emp_loc)) {
zipcode <- emp_loc[row, 3]
print(zipcode)
# length <- nchar(zipcode)
# if (length != 5){
#   print(zipcode)
# }
}
for (row in 1:nrow(emp_loc)) {
zipcode <- emp_loc[row, 3]
length <- nchar(zipcode)
if (length != 5){
print(zipcode)
}
}
for (row in 1:nrow(emp_loc)) {
zipcode <- emp_loc[row, 3]
length <- nchar(zipcode)
if (length == 10){
print(zipcode)
}
}
for (row in 1:nrow(emp_loc)) {
zipcode <- emp_loc[row, 3]
length <- nchar(zipcode)
if (length == 10){
print(zipcode)
}
}
for (row in 1:nrow(emp_loc)) {
val <- emp_loc$EMPLOYER_POSTAL_CODE[row]
if(nchar(val)==10){
print(val)
}
}
print(val)
typeof(emp$EMPLOYER_POSTAL_CODE)
nchar(emp$EMPLOYER_POSTAL_CODE)
nchar(emp$EMPLOYER_POSTAL_CODE[1])
emp$EMPLOYER_POSTAL_CODE
emp$EMPLOYER_POSTAL_CODE <- as.character(emp$EMPLOYER_POSTAL_CODE)
print(zipcode)
print(nchar(zipcode))
print(row)
print(zipcode)
nrow(emp)
print(row, zipcode)
print(zipcode)
for (row in 1:nrow(emp)){
zipcode <- emp$EMPLOYER_POSTAL_CODE[row]
print(row)
print(zipcode)
}
for (row in 1:nrow(emp)){
zipcode <- emp$EMPLOYER_POSTAL_CODE[row]
if (nchar(zipcode)==10){
print(zipcode)
}
}
for (row in 1:nrow(emp)){
zipcode <- emp$EMPLOYER_POSTAL_CODE[row]
if (nchar(zipcode)==10){
emp$EMPLOYER_POSTAL_CODE[row] <- substr(zipcode, 1,5)
print(emp$EMPLOYER_POSTAL_CODE[row])
}
}
emp_loc <- emp %>% group_by(EMPLOYER_STATE_PROVINCE, EMPLOYER_CITY, EMPLOYER_POSTAL_CODE) %>%
summarise(count = n()) %>%
arrange(desc(count))
view(emp_loc)
emp$EMPLOYER_CITY <- toupper(emp$EMPLOYER_CITY)
emp$EMPLOYER_CITY <- toupper(emp$EMPLOYER_CITY)
emp$EMPLOYER_STATE_PROVINCE <- toupper(emp$EMPLOYER_STATE_PROVINCE)
df <- read.csv('PERM_Disclosure_Data_FY2020_Q2.csv')
emp <- df%>%select(CASE_STATUS, RECEIVED_DATE, DECISION_DATE,EMPLOYER_NAME:EMPLOYER_STATE_PROVINCE, EMPLOYER_POSTAL_CODE, EMPLOYER_NUM_EMPLOYEES:NAICS_CODE,PW_SOC_CODE:PW_UNIT_OF_PAY)
emp$EMPLOYER_POSTAL_CODE <- as.character(emp$EMPLOYER_POSTAL_CODE)
emp$EMPLOYER_CITY <- toupper(emp$EMPLOYER_CITY)
emp$EMPLOYER_STATE_PROVINCE <- toupper(emp$EMPLOYER_STATE_PROVINCE)
for (row in 1:nrow(emp)){
zipcode <- emp$EMPLOYER_POSTAL_CODE[row]
if (nchar(zipcode)==10){
emp$EMPLOYER_POSTAL_CODE[row] <- substr(zipcode, 1,5)
print(emp$EMPLOYER_POSTAL_CODE[row])
}
}
emp_loc <- emp %>% group_by(EMPLOYER_STATE_PROVINCE, EMPLOYER_CITY, EMPLOYER_POSTAL_CODE) %>%
summarise(count = n()) %>%
arrange(desc(count))
view(emp_loc)
write.csv(emp_loc, "emp_loc2.csv", row.names = FALSE)
setwd("~/Repo/immigration")
library(tidyverse)
library(dbplyr)
df <- read.csv('PERM_Disclosure_Data_FY2020_Q2.csv')
emp <- df%>%select(CASE_STATUS, RECEIVED_DATE, DECISION_DATE,EMPLOYER_NAME:EMPLOYER_STATE_PROVINCE, EMPLOYER_POSTAL_CODE, EMPLOYER_NUM_EMPLOYEES:NAICS_CODE,PW_SOC_CODE:PW_UNIT_OF_PAY)
emp$EMPLOYER_POSTAL_CODE <- as.character(emp$EMPLOYER_POSTAL_CODE)
emp$EMPLOYER_CITY <- toupper(emp$EMPLOYER_CITY)
emp$EMPLOYER_STATE_PROVINCE <- toupper(emp$EMPLOYER_STATE_PROVINCE)
for (row in 1:nrow(emp)){
zipcode <- emp$EMPLOYER_POSTAL_CODE[row]
if (nchar(zipcode)==10){
emp$EMPLOYER_POSTAL_CODE[row] <- substr(zipcode, 1,5)
}
}
emp_loc_st <- emp %>% group_by(EMPLOYER_STATE_PROVINCE) %>%
summarise(count = n()) %>%
arrange(desc(count))
View(emp_loc_st)
#####there are a lot of duplications and unclean data in state names
#####clean state names by each state
CA <- emp %>% filter('CA' %in% EMPLOYER_STATE_PROVINCE)
View(CA)
#####there are a lot of duplications and unclean data in state names
#####clean state names by each state
CA <- emp %>% filter(c('CA') %in% EMPLOYER_STATE_PROVINCE)
View(CA)
#####there are a lot of duplications and unclean data in state names
#####clean state names by each state
CA <- str_detect(emp$EMPLOYER_STATE_PROVINCE, "CA")
View(CA)
CA <- emp %>% filter(str_detect(emp$EMPLOYER_STATE_PROVINCE, "CA"))
View(CA)
CA <- emp %>% filter(str_detect(emp$EMPLOYER_STATE_PROVINCE, "CALI"))
View(CA)
CAs <- CA %>% group_by(EMPLOYER_STATE_PROVINCE) %>% summarise(count = n())
View(CAs)
emp$STATE_ABBR <- 'CA'
View(emp)
TX <- emp %>% filter(str_detect(emp$EMPLOYER_STATE_PROVINCE, "TEXAS"))
View(TX)
TXs <-TX %>% group_by(EMPLOYER_STATE_PROVINCE) %>% summarise(count = n())
View(TXs)
##create a new column in original emp dataset to store correct state abbr.
emp$STATE_ABBR <- 'n'
if (str_detect(emp$EMPLOYER_STATE_PROVINCE, "CALI")) {
emp$STATE_ABBR <- 'CA'
}
for (row in 1:nrow(emp)){
st <- emp[row, 8]
if (str_detect(st, 'CALI')){
emp$STATE_ABBR <- 'CA'
}
}
for (row in 1:nrow(emp)){
st <- emp$EMPLOYER_STATE_PROVINCE[row]
if (str_detect(st, 'CALI')){
emp$STATE_ABBR <- 'CA'
}
}
##create a new column in original emp dataset to store correct state abbr.
emp$STATE_ABBR <- 'n'
for (row in 1:nrow(emp)){
st <- emp$EMPLOYER_STATE_PROVINCE[row]
if (str_detect(st, 'CALI')){
emp$STATE_ABBR <- 'CA'
}
}
##create a new column in original emp dataset to store correct state abbr.
emp$STATE_ABBR <- 'n'
for (row in 1:nrow(emp)){
st <- emp$EMPLOYER_STATE_PROVINCE[row]
if (str_detect(st, 'CALI')){
emp$STATE_ABBR[row] <- 'CA'
}
}
for (row in 1:nrow(emp)){
st <- emp$EMPLOYER_STATE_PROVINCE[row]
if (str_detect(st, 'TEXAS')){
emp$STATE_ABBR[row] <- 'TX'
}
}
###############Texas ends here################
NY <- emp %>% filter(str_detect(emp$EMPLOYER_STATE_PROVINCE, "NEW YORK"))
###############Texas ends here################
NY <- emp %>% filter(str_detect(emp$EMPLOYER_STATE_PROVINCE, "NEW YORK"))
NYs <-NY %>% group_by(EMPLOYER_STATE_PROVINCE) %>% summarise(count = n())
View(NYs)
for (row in 1:nrow(emp)){
st <- emp$EMPLOYER_STATE_PROVINCE[row]
if (str_detect(st, 'NEW YORK')){
emp$STATE_ABBR[row] <- 'NY'
}
}
###############New York ends here################
WA <- emp %>% filter(str_detect(emp$EMPLOYER_STATE_PROVINCE, "WA"))
WAs <-WA %>% group_by(EMPLOYER_STATE_PROVINCE) %>% summarise(count = n())
View(WAs)
###############New York ends here################
WA <- emp %>% filter(str_detect(emp$EMPLOYER_STATE_PROVINCE, "WASH"))
WAs <-WA %>% group_by(EMPLOYER_STATE_PROVINCE) %>% summarise(count = n())
View(WAs)
for (row in 1:nrow(emp)){
st <- emp$EMPLOYER_STATE_PROVINCE[row]
if (str_detect(st, 'WASH')){
emp$STATE_ABBR[row] <- 'WA'
}
}
###############Washington ends here################
NJ <- emp %>% filter(str_detect(emp$EMPLOYER_STATE_PROVINCE, "J"))
NJs <-NJ %>% group_by(EMPLOYER_STATE_PROVINCE) %>% summarise(count = n())
View(NJs)
###############Washington ends here################
NJ <- emp %>% filter(str_detect(emp$EMPLOYER_STATE_PROVINCE, " JERSEY"))
NJs <-NJ %>% group_by(EMPLOYER_STATE_PROVINCE) %>% summarise(count = n())
View(NJs)
###############Washington ends here################
NJ <- emp %>% filter(str_detect(emp$EMPLOYER_STATE_PROVINCE, "JERSEY"))
NJs <-NJ %>% group_by(EMPLOYER_STATE_PROVINCE) %>% summarise(count = n())
View(NJs)
for (row in 1:nrow(emp)){
st <- emp$EMPLOYER_STATE_PROVINCE[row]
if (str_detect(st, 'JERSEY')){
emp$STATE_ABBR[row] <- 'NJ'
}
}
###############New Jersey ends here################
IL <- emp %>% filter(str_detect(emp$EMPLOYER_STATE_PROVINCE, "ILLI"))
ILs <-IL %>% group_by(EMPLOYER_STATE_PROVINCE) %>% summarise(count = n())
View(ILs)
###############New Jersey ends here################
IL <- emp %>% filter(str_detect(emp$EMPLOYER_STATE_PROVINCE, "ILLINOIS"))
ILs <-IL %>% group_by(EMPLOYER_STATE_PROVINCE) %>% summarise(count = n())
View(ILs)
for (row in 1:nrow(emp)){
st <- emp$EMPLOYER_STATE_PROVINCE[row]
if (str_detect(st, 'ILLINOIS')){
emp$STATE_ABBR[row] <- 'IL'
}
}
